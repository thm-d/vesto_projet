{"ast":null,"code":"/* eslint-disable import/no-anonymous-default-export */\nconst fetchDataList = (url, pages) => {\n  return fetchDataListOnePage(url, 1, pages, 0);\n};\n\nconst fetchDataListOnePage = function (url, page, max_page, total) {\n  let offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  let formattedData = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  // page: first page to fetch\n  // max_pages: last page to fetch\n  return fetch(url + `&offset=${offset}&api_key=keysF0s3bC0g7ODOW`).then(res => res.json()).then(res => {\n    total += res.records ? res.records.length : 0;\n\n    if (res.offset && page < max_page) {\n      //console.log('in if', page, max_page)\n      return fetchDataListOnePage(url, page + 1, max_page, total, res.offset);\n    } else {\n      if (formattedData) {\n        var records = res.records.map(record => record['fields']);\n        const data = {\n          data: records,\n          total: res.offset ? total + 1 : total\n        }; //console.log('fetch page ', page, max_page, data)\n\n        return data;\n      } else {\n        return res;\n      }\n    }\n  }).catch(error => console.log(error));\n};\n\nconst fetchDataListPages = async function (url) {\n  let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n  console.log('fetch pages', url, max);\n  let per_page = 100;\n  let page = 1;\n  let offset = '';\n  let total = 0;\n  let records = [];\n  console.log(offset && page * per_page < max);\n\n  while (page === 1 || offset && page * per_page < max) {\n    let res = await fetchDataListOnePage(url, page, page, total, offset, false);\n    offset = res.offset;\n    total += offset ? per_page : res.records ? res.records.length : 0;\n    page++;\n    records = records.concat(res.records.map(record => record['fields']));\n  }\n\n  return {\n    data: records,\n    total: total\n  };\n};\n\nconst fetchDataOne = async url => {\n  return fetch(url + \"?api_key=keysF0s3bC0g7ODOW\").then(res => res.json()).then(res => {\n    const data = {\n      data: res['fields']\n    };\n    console.log('fetched data one: ', url, data);\n    return data;\n  }).catch(error => console.log(error));\n};\n\nconst createData = (url, data) => {\n  return fetch(url + \"?api_key=keysF0s3bC0g7ODOW\", {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(res => res.json()).then(res => {\n    var records = res.records.map(record => record['fields']);\n    const data = {\n      data: records[0]\n    }; //console.log('created record: ', data)\n\n    return data;\n  }).catch(error => console.log(error));\n};\n\nconst updateData = (url, data) => {\n  return fetch(url + \"?api_key=keysF0s3bC0g7ODOW\", {\n    method: 'PATCH',\n    body: JSON.stringify(data),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(res => res.json()).then(res => {\n    var records = res.records.map(record => record['fields']);\n    const data = {\n      data: records[0]\n    }; //console.log('updated record: ', data)\n\n    return data;\n  }).catch(error => console.log(error));\n};\n\nconst updateDataMany = (url, data) => {\n  return fetch(url + \"?api_key=keysF0s3bC0g7ODOW\", {\n    method: 'PATCH',\n    body: JSON.stringify(data),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(res => res.json()).then(res => {\n    var ids = res.records.map(record => record['id']);\n    const data = {\n      data: ids\n    }; //console.log('updated record: ', data)\n\n    return data;\n  }).catch(error => console.log(error));\n};\n\nconst deleteDataMany = url => {\n  return fetch(url + \"&api_key=keysF0s3bC0g7ODOW\", {\n    method: 'DELETE'\n  }).then(res => res.json()).then(res => {\n    var ids = res.records.map(record => record['id']);\n    const data = {\n      data: ids\n    }; //console.log('deleted records: ', data)\n\n    return data;\n  }).catch(error => console.log(error));\n};\n\nconst deleteData = url => {\n  return fetch(url + \"&api_key=keysF0s3bC0g7ODOW\", {\n    method: 'DELETE'\n  }).then(res => res.json()).then(res => {\n    const data = {\n      data: res.records\n    }; //console.log('deleted records: ', data)\n\n    return data;\n  }).catch(error => console.log(error));\n};\n\nconst getFilterFormula = filter => {\n  var filterByFormula = \"\";\n  var counter = 1;\n  var view = ''; // if view in object, get it off\n\n  if ('view' in filter) {\n    view = `&view=${filter['view']}`;\n    delete filter.view;\n  }\n\n  const size = filter && Object.keys(filter).length;\n\n  if (size > 1) {\n    filterByFormula += size > 1 ? 'AND(' : '';\n    Object.keys(filter).forEach(key => {\n      filterByFormula += `{${key}}='${filter[key]}'`;\n\n      if (size > 1) {\n        filterByFormula += counter === size ? ')' : ', ';\n      }\n\n      counter++;\n    });\n  }\n\n  if (size === 1) {\n    filterByFormula += `{${Object.keys(filter)[0]}}='${filter[Object.keys(filter)[0]]}'`;\n  }\n\n  return filterByFormula + view;\n};\n\nexport default (apiUrl => ({\n  getList: (resource, params) => {\n    const {\n      page,\n      perPage\n    } = params.pagination;\n    const {\n      field,\n      order\n    } = params.sort;\n    const filter = params.filter;\n    console.log('get liste', perPage); // filter\n\n    let filterByFormula = getFilterFormula(filter); // sort\n\n    const sort = `sort%5B0%5D%5Bfield%5D=${field}&sort%5B0%5D%5Bdirection%5D=${order.toLowerCase()}`;\n\n    if (perPage > 100) {\n      const url = `${apiUrl}/${resource}?pageSize=${100}&${sort}&filterByFormula=${filterByFormula}`;\n      return fetchDataListPages(url, perPage);\n    } else {\n      const url = `${apiUrl}/${resource}?pageSize=${perPage}&${sort}&filterByFormula=${filterByFormula}`;\n      return fetchDataList(url, page);\n    }\n  },\n  getOne: (resource, params) => {\n    //console.log('get one', params, resource)\n    const url = `${apiUrl}/${resource}/${params.id}`;\n    return fetchDataOne(url);\n  },\n  getMany: (resource, params) => {\n    //console.log('in get many ', params)\n    const ids = params.ids;\n    let size = ids.length;\n    var filterByFormula = \"\";\n    var counter = 1;\n\n    if (size > 1) {\n      filterByFormula += size > 1 ? 'OR(' : '';\n      ids.forEach(id => {\n        filterByFormula += `{id} = '${id}'`;\n\n        if (size > 1) {\n          filterByFormula += counter === size ? ')' : ', ';\n        }\n\n        counter++;\n      });\n    }\n\n    if (size === 1) {\n      filterByFormula += `{id} ='${ids[Object.keys(ids)[0]]}'`;\n    }\n\n    const url = `${apiUrl}/${resource}?filterByFormula=${filterByFormula}`;\n    return fetchDataList(url, size < 100 ? size : 100);\n  },\n  getManyReference: (resource, params) => {\n    const target = params.target;\n    const id = params.id;\n    const filter = params.filter;\n    const {\n      page,\n      perPage\n    } = params.pagination;\n    const {\n      field,\n      order\n    } = params.sort;\n    let list_filter = {\n      [target]: id,\n      ...filter\n    }; //console.log(target, list_filter)\n    // filter\n\n    let filterByFormula = getFilterFormula(list_filter); // sort\n\n    const sort = `sort%5B0%5D%5Bfield%5D=${field}&sort%5B0%5D%5Bdirection%5D=${order.toLowerCase()}`;\n    const url = `${apiUrl}/${resource}?pageSize=${perPage}&${sort}&filterByFormula=${filterByFormula}`;\n    return fetchDataList(url, page);\n  },\n  create: (resource, params) => {\n    const data = params.data;\n    let url = `${apiUrl}/${resource}`;\n    let new_data = {\n      records: [{\n        fields: data\n      }]\n    };\n    return createData(url, new_data);\n  },\n  updateMany: (resource, params) => {\n    const ids = params.ids;\n    const data = params.data;\n    let url = `${apiUrl}/${resource}`;\n    let records = [];\n    ids.forEach(id => {\n      records.push({\n        id: id,\n        fields: data\n      });\n    });\n    let new_data = {\n      records: records\n    };\n    return updateDataMany(url, new_data);\n  },\n  update: (resource, params) => {\n    //console.log('update resource data', resource, params)\n    const id = params.id;\n    const data = params.data;\n    let url = `${apiUrl}/${resource}`;\n    let new_data = {\n      records: [{\n        id: id,\n        fields: data\n      }]\n    }; //console.log('update', new_data)\n\n    return updateData(url, new_data);\n  },\n  deleteMany: (resource, params) => {\n    const ids = params.ids;\n    let url = `${apiUrl}/${resource}?records[]=${ids[0]}`;\n\n    for (var i = 1; i < ids.length; i++) {\n      url += '&records[]=' + ids[i];\n    }\n\n    return deleteDataMany(url);\n  },\n  delete: (resource, params) => {\n    const id = params.id;\n    let url = `${apiUrl}/${resource}?records[]=${id}`;\n    return deleteData(url);\n  }\n}));","map":{"version":3,"sources":["/Users/thomasd./test_technique_stock/src/dataProvider.js"],"names":["fetchDataList","url","pages","fetchDataListOnePage","page","max_page","total","offset","formattedData","fetch","then","res","json","records","length","map","record","data","catch","error","console","log","fetchDataListPages","max","per_page","concat","fetchDataOne","createData","method","body","JSON","stringify","headers","updateData","updateDataMany","ids","deleteDataMany","deleteData","getFilterFormula","filter","filterByFormula","counter","view","size","Object","keys","forEach","key","apiUrl","getList","resource","params","perPage","pagination","field","order","sort","toLowerCase","getOne","id","getMany","getManyReference","target","list_filter","create","new_data","fields","updateMany","push","update","deleteMany","i","delete"],"mappings":"AAAA;AAEA,MAAMA,aAAa,GAAG,CAACC,GAAD,EAAcC,KAAd,KAAgC;AAClD,SAAQC,oBAAoB,CAACF,GAAD,EAAM,CAAN,EAASC,KAAT,EAAgB,CAAhB,CAA5B;AACH,CAFD;;AAIA,MAAMC,oBAAoB,GAAG,UAACF,GAAD,EAAcG,IAAd,EAA4BC,QAA5B,EAA8CC,KAA9C,EAAmG;AAAA,MAAtCC,MAAsC,uEAA7B,EAA6B;AAAA,MAAzBC,aAAyB,uEAAT,IAAS;AAC5H;AACA;AACA,SAAOC,KAAK,CAACR,GAAG,GAAI,WAAUM,MAAO,4BAAzB,CAAL,CACPG,IADO,CACFC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADL,EAEPF,IAFO,CAEFC,GAAG,IAAI;AACAL,IAAAA,KAAK,IAAIK,GAAG,CAACE,OAAJ,GAAcF,GAAG,CAACE,OAAJ,CAAYC,MAA1B,GAAmC,CAA5C;;AACA,QAAIH,GAAG,CAACJ,MAAJ,IAAcH,IAAI,GAAGC,QAAzB,EAAmC;AAC/B;AACA,aAAQF,oBAAoB,CAACF,GAAD,EAAMG,IAAI,GAAG,CAAb,EAAgBC,QAAhB,EAA0BC,KAA1B,EAAiCK,GAAG,CAACJ,MAArC,CAA5B;AACH,KAHD,MAGO;AACH,UAAIC,aAAJ,EAAmB;AACf,YAAIK,OAAO,GAAGF,GAAG,CAACE,OAAJ,CAAYE,GAAZ,CAAgBC,MAAM,IAAIA,MAAM,CAAC,QAAD,CAAhC,CAAd;AACA,cAAMC,IAAI,GAAG;AAACA,UAAAA,IAAI,EAAEJ,OAAP;AAAgBP,UAAAA,KAAK,EAAEK,GAAG,CAACJ,MAAJ,GAAaD,KAAK,GAAG,CAArB,GAAyBA;AAAhD,SAAb,CAFe,CAGf;;AACA,eAAOW,IAAP;AACH,OALD,MAKO;AACH,eAAQN,GAAR;AACH;AACJ;AACb,GAjBO,EAkBEO,KAlBF,CAkBQC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAlBjB,CAAP;AAmBH,CAtBD;;AAwBA,MAAMG,kBAAkB,GAAG,gBAAOrB,GAAP,EAAoC;AAAA,MAAhBsB,GAAgB,uEAAV,KAAU;AAC3DH,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BpB,GAA3B,EAAgCsB,GAAhC;AACA,MAAIC,QAAQ,GAAG,GAAf;AACA,MAAIpB,IAAI,GAAG,CAAX;AACA,MAAIG,MAAM,GAAG,EAAb;AACA,MAAID,KAAK,GAAG,CAAZ;AACA,MAAIO,OAAO,GAAG,EAAd;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYd,MAAM,IAAKH,IAAI,GAAGoB,QAAP,GAAkBD,GAAzC;;AACA,SAAQnB,IAAI,KAAK,CAAT,IAAeG,MAAM,IAAKH,IAAI,GAAGoB,QAAP,GAAkBD,GAApD,EAA2D;AACvD,QAAIZ,GAAG,GAAG,MAAMR,oBAAoB,CAACF,GAAD,EAAMG,IAAN,EAAYA,IAAZ,EAAkBE,KAAlB,EAAyBC,MAAzB,EAAiC,KAAjC,CAApC;AACAA,IAAAA,MAAM,GAAGI,GAAG,CAACJ,MAAb;AACAD,IAAAA,KAAK,IAAIC,MAAM,GAAGiB,QAAH,GAAeb,GAAG,CAACE,OAAJ,GAAcF,GAAG,CAACE,OAAJ,CAAYC,MAA1B,GAAmC,CAAjE;AACAV,IAAAA,IAAI;AACJS,IAAAA,OAAO,GAAGA,OAAO,CAACY,MAAR,CAAed,GAAG,CAACE,OAAJ,CAAYE,GAAZ,CAAgBC,MAAM,IAAIA,MAAM,CAAC,QAAD,CAAhC,CAAf,CAAV;AACH;;AACD,SAAQ;AAACC,IAAAA,IAAI,EAAEJ,OAAP;AAAgBP,IAAAA,KAAK,EAAEA;AAAvB,GAAR;AACH,CAhBD;;AAkBA,MAAMoB,YAAY,GAAG,MAAOzB,GAAP,IAAuB;AACxC,SAAOQ,KAAK,CAACR,GAAG,GAAG,4BAAP,CAAL,CACPS,IADO,CACFC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADL,EAEPF,IAFO,CAEFC,GAAG,IAAI;AACA,UAAMM,IAAI,GAAG;AAACA,MAAAA,IAAI,EAAEN,GAAG,CAAC,QAAD;AAAV,KAAb;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCpB,GAAlC,EAAuCgB,IAAvC;AACA,WAAOA,IAAP;AACZ,GANO,EAOEC,KAPF,CAOQC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAPjB,CAAP;AAQH,CATD;;AAYA,MAAMQ,UAAU,GAAG,CAAC1B,GAAD,EAAcgB,IAAd,KAA+B;AAC9C,SAAOR,KAAK,CAACR,GAAG,GAAG,4BAAP,EACR;AACI2B,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,IAAf,CAFV;AAGIe,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAHb,GADQ,CAAL,CAQPtB,IARO,CAQFC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARL,EASPF,IATO,CASFC,GAAG,IAAI;AACA,QAAIE,OAAO,GAAGF,GAAG,CAACE,OAAJ,CAAYE,GAAZ,CAAgBC,MAAM,IAAIA,MAAM,CAAC,QAAD,CAAhC,CAAd;AACA,UAAMC,IAAI,GAAG;AAACA,MAAAA,IAAI,EAAEJ,OAAO,CAAC,CAAD;AAAd,KAAb,CAFA,CAGA;;AACA,WAAOI,IAAP;AACZ,GAdO,EAeEC,KAfF,CAeQC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAfjB,CAAP;AAgBH,CAjBD;;AAmBA,MAAMc,UAAU,GAAG,CAAChC,GAAD,EAAcgB,IAAd,KAA+B;AAC9C,SAAOR,KAAK,CAACR,GAAG,GAAG,4BAAP,EACR;AACI2B,IAAAA,MAAM,EAAE,OADZ;AAEIC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,IAAf,CAFV;AAGIe,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAHb,GADQ,CAAL,CAQPtB,IARO,CAQFC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARL,EASPF,IATO,CASFC,GAAG,IAAI;AACA,QAAIE,OAAO,GAAGF,GAAG,CAACE,OAAJ,CAAYE,GAAZ,CAAgBC,MAAM,IAAIA,MAAM,CAAC,QAAD,CAAhC,CAAd;AACA,UAAMC,IAAI,GAAG;AAACA,MAAAA,IAAI,EAAEJ,OAAO,CAAC,CAAD;AAAd,KAAb,CAFA,CAGA;;AACA,WAAOI,IAAP;AACZ,GAdO,EAeEC,KAfF,CAeQC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAfjB,CAAP;AAgBH,CAjBD;;AAmBA,MAAMe,cAAc,GAAG,CAACjC,GAAD,EAAcgB,IAAd,KAA+B;AAClD,SAAOR,KAAK,CAACR,GAAG,GAAG,4BAAP,EACR;AACI2B,IAAAA,MAAM,EAAE,OADZ;AAEIC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,IAAf,CAFV;AAGIe,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAHb,GADQ,CAAL,CAQPtB,IARO,CAQFC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARL,EASPF,IATO,CASFC,GAAG,IAAI;AACA,QAAIwB,GAAG,GAAGxB,GAAG,CAACE,OAAJ,CAAYE,GAAZ,CAAgBC,MAAM,IAAIA,MAAM,CAAC,IAAD,CAAhC,CAAV;AACA,UAAMC,IAAI,GAAG;AAACA,MAAAA,IAAI,EAAEkB;AAAP,KAAb,CAFA,CAGA;;AACA,WAAOlB,IAAP;AACZ,GAdO,EAeEC,KAfF,CAeQC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAfjB,CAAP;AAgBH,CAjBD;;AAmBA,MAAMiB,cAAc,GAAInC,GAAD,IAAiB;AACpC,SAAOQ,KAAK,CAACR,GAAG,GAAG,4BAAP,EACR;AACI2B,IAAAA,MAAM,EAAE;AADZ,GADQ,CAAL,CAIPlB,IAJO,CAIFC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJL,EAKPF,IALO,CAKFC,GAAG,IAAI;AACA,QAAIwB,GAAG,GAAGxB,GAAG,CAACE,OAAJ,CAAYE,GAAZ,CAAgBC,MAAM,IAAIA,MAAM,CAAC,IAAD,CAAhC,CAAV;AACA,UAAMC,IAAI,GAAG;AAACA,MAAAA,IAAI,EAAEkB;AAAP,KAAb,CAFA,CAGA;;AACA,WAAOlB,IAAP;AACZ,GAVO,EAWEC,KAXF,CAWQC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAXjB,CAAP;AAYH,CAbD;;AAeA,MAAMkB,UAAU,GAAIpC,GAAD,IAAiB;AAChC,SAAOQ,KAAK,CAACR,GAAG,GAAG,4BAAP,EACR;AACI2B,IAAAA,MAAM,EAAE;AADZ,GADQ,CAAL,CAIPlB,IAJO,CAIFC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJL,EAKPF,IALO,CAKFC,GAAG,IAAI;AACA,UAAMM,IAAI,GAAG;AAACA,MAAAA,IAAI,EAAEN,GAAG,CAACE;AAAX,KAAb,CADA,CAEA;;AACA,WAAOI,IAAP;AACZ,GATO,EAUEC,KAVF,CAUQC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAVjB,CAAP;AAWH,CAZD;;AAcA,MAAMmB,gBAAgB,GAAIC,MAAD,IAAY;AACjC,MAAIC,eAAe,GAAG,EAAtB;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,IAAI,GAAG,EAAX,CAHiC,CAIjC;;AACA,MAAI,UAAUH,MAAd,EAAsB;AAClBG,IAAAA,IAAI,GAAI,SAAQH,MAAM,CAAC,MAAD,CAAS,EAA/B;AACA,WAAOA,MAAM,CAACG,IAAd;AACH;;AACD,QAAMC,IAAI,GAAGJ,MAAM,IAAIK,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBzB,MAA3C;;AACA,MAAI6B,IAAI,GAAG,CAAX,EAAc;AACVH,IAAAA,eAAe,IAAIG,IAAI,GAAG,CAAP,GAAW,MAAX,GAAoB,EAAvC;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,OAApB,CAA4BC,GAAG,IAAI;AAC/BP,MAAAA,eAAe,IAAK,IAAGO,GAAI,MAAKR,MAAM,CAACQ,GAAD,CAAM,GAA5C;;AACA,UAAIJ,IAAI,GAAG,CAAX,EAAc;AACVH,QAAAA,eAAe,IAAKC,OAAO,KAAKE,IAAb,GAAqB,GAArB,GAA2B,IAA9C;AACH;;AACDF,MAAAA,OAAO;AACV,KAND;AAOH;;AACD,MAAIE,IAAI,KAAK,CAAb,EAAgB;AACZH,IAAAA,eAAe,IAAK,IAAGI,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoB,CAApB,CAAuB,MAAKA,MAAM,CAACK,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoB,CAApB,CAAD,CAAyB,GAAlF;AACH;;AACD,SAAOC,eAAe,GAAGE,IAAzB;AACH,CAxBD;;AA0BA,gBACIM,MADW,KAEe;AAE1BC,EAAAA,OAAO,EAAE,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAC3B,UAAM;AAAE/C,MAAAA,IAAF;AAAQgD,MAAAA;AAAR,QAAoBD,MAAM,CAACE,UAAjC;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBJ,MAAM,CAACK,IAAhC;AACA,UAAMjB,MAAM,GAAGY,MAAM,CAACZ,MAAtB;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB+B,OAAzB,EAJ2B,CAK3B;;AAEA,QAAIZ,eAAe,GAAGF,gBAAgB,CAACC,MAAD,CAAtC,CAP2B,CAS3B;;AACA,UAAMiB,IAAI,GAAI,0BAAyBF,KAAM,+BAA8BC,KAAK,CAACE,WAAN,EAAoB,EAA/F;;AAGA,QAAIL,OAAO,GAAG,GAAd,EAAmB;AACf,YAAMnD,GAAG,GAAI,GAAE+C,MAAO,IAAGE,QAAS,aAAY,GAAI,IAAGM,IAAK,oBAAmBhB,eAAgB,EAA7F;AACA,aAAQlB,kBAAkB,CAACrB,GAAD,EAAMmD,OAAN,CAA1B;AACH,KAHD,MAGO;AACH,YAAMnD,GAAG,GAAI,GAAE+C,MAAO,IAAGE,QAAS,aAAYE,OAAQ,IAAGI,IAAK,oBAAmBhB,eAAgB,EAAjG;AACA,aAAQxC,aAAa,CAACC,GAAD,EAAMG,IAAN,CAArB;AACH;AAEJ,GAvByB;AA0B1BsD,EAAAA,MAAM,EAAE,CAACR,QAAD,EAAWC,MAAX,KAAsB;AAC1B;AACA,UAAMlD,GAAG,GAAI,GAAE+C,MAAO,IAAGE,QAAS,IAAGC,MAAM,CAACQ,EAAG,EAA/C;AACA,WAAOjC,YAAY,CAACzB,GAAD,CAAnB;AACH,GA9ByB;AAgC1B2D,EAAAA,OAAO,EAAE,CAACV,QAAD,EAAWC,MAAX,KAAsB;AAC3B;AACA,UAAMhB,GAAG,GAAGgB,MAAM,CAAChB,GAAnB;AACA,QAAIQ,IAAI,GAAGR,GAAG,CAACrB,MAAf;AACA,QAAI0B,eAAe,GAAG,EAAtB;AACA,QAAIC,OAAO,GAAG,CAAd;;AACA,QAAIE,IAAI,GAAG,CAAX,EAAc;AACVH,MAAAA,eAAe,IAAIG,IAAI,GAAG,CAAP,GAAW,KAAX,GAAmB,EAAtC;AACAR,MAAAA,GAAG,CAACW,OAAJ,CAAYa,EAAE,IAAI;AACdnB,QAAAA,eAAe,IAAK,WAAUmB,EAAG,GAAjC;;AACA,YAAIhB,IAAI,GAAG,CAAX,EAAc;AACVH,UAAAA,eAAe,IAAKC,OAAO,KAAKE,IAAb,GAAqB,GAArB,GAA2B,IAA9C;AACH;;AACDF,QAAAA,OAAO;AACV,OAND;AAOH;;AACD,QAAIE,IAAI,KAAK,CAAb,EAAgB;AACZH,MAAAA,eAAe,IAAK,UAASL,GAAG,CAACS,MAAM,CAACC,IAAP,CAAYV,GAAZ,EAAiB,CAAjB,CAAD,CAAsB,GAAtD;AACH;;AACL,UAAMlC,GAAG,GAAI,GAAE+C,MAAO,IAAGE,QAAS,oBAAmBV,eAAgB,EAArE;AACA,WAAQxC,aAAa,CAACC,GAAD,EAAM0C,IAAI,GAAG,GAAP,GAAaA,IAAb,GAAoB,GAA1B,CAArB;AACC,GArDyB;AAuD1BkB,EAAAA,gBAAgB,EAAE,CAACX,QAAD,EAAWC,MAAX,KAAsB;AACpC,UAAMW,MAAM,GAAGX,MAAM,CAACW,MAAtB;AACA,UAAMH,EAAE,GAAGR,MAAM,CAACQ,EAAlB;AACA,UAAMpB,MAAM,GAAGY,MAAM,CAACZ,MAAtB;AACA,UAAM;AAAEnC,MAAAA,IAAF;AAAQgD,MAAAA;AAAR,QAAoBD,MAAM,CAACE,UAAjC;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBJ,MAAM,CAACK,IAAhC;AAEA,QAAIO,WAAW,GAAG;AAAE,OAACD,MAAD,GAAUH,EAAZ;AAAgB,SAAGpB;AAAnB,KAAlB,CAPoC,CAQpC;AAEA;;AACA,QAAIC,eAAe,GAAGF,gBAAgB,CAACyB,WAAD,CAAtC,CAXoC,CAapC;;AACA,UAAMP,IAAI,GAAI,0BAAyBF,KAAM,+BAA8BC,KAAK,CAACE,WAAN,EAAoB,EAA/F;AAEA,UAAMxD,GAAG,GAAI,GAAE+C,MAAO,IAAGE,QAAS,aAAYE,OAAQ,IAAGI,IAAK,oBAAmBhB,eAAgB,EAAjG;AACA,WAAOxC,aAAa,CAACC,GAAD,EAAMG,IAAN,CAApB;AACH,GAzEyB;AA4E1B4D,EAAAA,MAAM,EAAE,CAACd,QAAD,EAAWC,MAAX,KAAsB;AAC1B,UAAMlC,IAAI,GAAGkC,MAAM,CAAClC,IAApB;AAEA,QAAIhB,GAAG,GAAI,GAAE+C,MAAO,IAAGE,QAAS,EAAhC;AACA,QAAIe,QAAQ,GAAG;AAAEpD,MAAAA,OAAO,EAAE,CAAE;AAAEqD,QAAAA,MAAM,EAAEjD;AAAV,OAAF;AAAX,KAAf;AAEA,WAAOU,UAAU,CAAC1B,GAAD,EAAMgE,QAAN,CAAjB;AACH,GAnFyB;AAqF1BE,EAAAA,UAAU,EAAE,CAACjB,QAAD,EAAWC,MAAX,KAAsB;AAC9B,UAAMhB,GAAG,GAAGgB,MAAM,CAAChB,GAAnB;AACA,UAAMlB,IAAI,GAAGkC,MAAM,CAAClC,IAApB;AAEA,QAAIhB,GAAG,GAAI,GAAE+C,MAAO,IAAGE,QAAS,EAAhC;AACA,QAAIrC,OAAO,GAAG,EAAd;AACAsB,IAAAA,GAAG,CAACW,OAAJ,CAAaa,EAAE,IAAI;AACf9C,MAAAA,OAAO,CAACuD,IAAR,CAAa;AAAET,QAAAA,EAAE,EAAEA,EAAN;AAAUO,QAAAA,MAAM,EAAEjD;AAAlB,OAAb;AACH,KAFD;AAGA,QAAIgD,QAAQ,GAAG;AAAEpD,MAAAA,OAAO,EAAEA;AAAX,KAAf;AAEA,WAAQqB,cAAc,CAACjC,GAAD,EAAMgE,QAAN,CAAtB;AAEH,GAlGyB;AAoG1BI,EAAAA,MAAM,EAAE,CAACnB,QAAD,EAAWC,MAAX,KAAsB;AAC1B;AACA,UAAMQ,EAAE,GAAGR,MAAM,CAACQ,EAAlB;AACA,UAAM1C,IAAI,GAAGkC,MAAM,CAAClC,IAApB;AAEA,QAAIhB,GAAG,GAAI,GAAE+C,MAAO,IAAGE,QAAS,EAAhC;AACA,QAAIe,QAAQ,GAAG;AAAEpD,MAAAA,OAAO,EAAE,CAAC;AAAE8C,QAAAA,EAAE,EAAEA,EAAN;AAAUO,QAAAA,MAAM,EAAEjD;AAAlB,OAAD;AAAX,KAAf,CAN0B,CAO1B;;AAGA,WAAQgB,UAAU,CAAChC,GAAD,EAAMgE,QAAN,CAAlB;AACH,GA/GyB;AAiH1BK,EAAAA,UAAU,EAAE,CAACpB,QAAD,EAAWC,MAAX,KAAsB;AAC9B,UAAMhB,GAAG,GAAGgB,MAAM,CAAChB,GAAnB;AAEA,QAAIlC,GAAG,GAAI,GAAE+C,MAAO,IAAGE,QAAS,cAAaf,GAAG,CAAC,CAAD,CAAI,EAApD;;AAEA,SAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGpC,GAAG,CAACrB,MAAtB,EAA8ByD,CAAC,EAA/B,EAAmC;AAC/BtE,MAAAA,GAAG,IAAI,gBAAgBkC,GAAG,CAACoC,CAAD,CAA1B;AACH;;AAED,WAAQnC,cAAc,CAACnC,GAAD,CAAtB;AAEH,GA5HyB;AA8H1BuE,EAAAA,MAAM,EAAE,CAACtB,QAAD,EAAWC,MAAX,KAAsB;AAC1B,UAAMQ,EAAE,GAAGR,MAAM,CAACQ,EAAlB;AAEA,QAAI1D,GAAG,GAAI,GAAE+C,MAAO,IAAGE,QAAS,cAAaS,EAAG,EAAhD;AAGA,WAAQtB,UAAU,CAACpC,GAAD,CAAlB;AACH;AArIyB,CAFf,CAAf","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\n\nconst fetchDataList = (url: string, pages: Number) => {   \n    return (fetchDataListOnePage(url, 1, pages, 0))\n}\n\nconst fetchDataListOnePage = (url: string, page: Number, max_page: Number, total: Number, offset = '', formattedData = true) => {\n    // page: first page to fetch\n    // max_pages: last page to fetch\n    return fetch(url + `&offset=${offset}&api_key=keysF0s3bC0g7ODOW`)\n\t\t\t.then(res => res.json())\n\t\t\t.then(res => {\n                total += res.records ? res.records.length : 0\n                if (res.offset && page < max_page) {\n                    //console.log('in if', page, max_page)\n                    return (fetchDataListOnePage(url, page + 1, max_page, total, res.offset));\n                } else {\n                    if (formattedData) {\n                        var records = res.records.map(record => record['fields']);\n                        const data = {data: records, total: res.offset ? total + 1 : total}\n                        //console.log('fetch page ', page, max_page, data)\n                        return data\n                    } else {\n                        return (res)\n                    }\n                }\n\t\t\t})\n            .catch(error => console.log(error))\n}\n\nconst fetchDataListPages = async (url: string, max = 10000) => {\n    console.log('fetch pages', url, max)\n    let per_page = 100\n    let page = 1\n    let offset = ''\n    let total = 0\n    let records = []\n    console.log(offset && (page * per_page < max))\n    while ( page === 1 || (offset && (page * per_page < max))) {\n        let res = await fetchDataListOnePage(url, page, page, total, offset, false)\n        offset = res.offset\n        total += offset ? per_page : (res.records ? res.records.length : 0)\n        page ++\n        records = records.concat(res.records.map(record => record['fields']))\n    }\n    return ({data: records, total: total})\n}\n\nconst fetchDataOne = async (url: string) => {\n    return fetch(url + \"?api_key=keysF0s3bC0g7ODOW\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(res => {\n                const data = {data: res['fields']}\n                console.log('fetched data one: ', url, data)\n                return data;\n\t\t\t})\n            .catch(error => console.log(error))\n}\n\n\nconst createData = (url: string, data: Object) => {\n    return fetch(url + \"?api_key=keysF0s3bC0g7ODOW\", \n        {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: { \n                \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n        })\n\t\t\t.then(res => res.json())\n\t\t\t.then(res => {\n                var records = res.records.map(record => record['fields']);\n                const data = {data: records[0]}\n                //console.log('created record: ', data)\n                return data;\n\t\t\t})\n            .catch(error => console.log(error))\n}\n\nconst updateData = (url: string, data: Object) => {\n    return fetch(url + \"?api_key=keysF0s3bC0g7ODOW\", \n        {\n            method: 'PATCH',\n            body: JSON.stringify(data),\n            headers: { \n                \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n        })\n\t\t\t.then(res => res.json())\n\t\t\t.then(res => {\n                var records = res.records.map(record => record['fields']);\n                const data = {data: records[0]}\n                //console.log('updated record: ', data)\n                return data;\n\t\t\t})\n            .catch(error => console.log(error))\n}\n\nconst updateDataMany = (url: string, data: Object) => {\n    return fetch(url + \"?api_key=keysF0s3bC0g7ODOW\", \n        {\n            method: 'PATCH',\n            body: JSON.stringify(data),\n            headers: { \n                \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n        })\n\t\t\t.then(res => res.json())\n\t\t\t.then(res => {\n                var ids = res.records.map(record => record['id']);\n                const data = {data: ids}\n                //console.log('updated record: ', data)\n                return data;\n\t\t\t})\n            .catch(error => console.log(error))\n}\n\nconst deleteDataMany = (url: string) => {\n    return fetch(url + \"&api_key=keysF0s3bC0g7ODOW\", \n        {\n            method: 'DELETE'\n        })\n\t\t\t.then(res => res.json())\n\t\t\t.then(res => {\n                var ids = res.records.map(record => record['id']);\n                const data = {data: ids}\n                //console.log('deleted records: ', data)\n                return data;\n\t\t\t})\n            .catch(error => console.log(error))\n}\n\nconst deleteData = (url: string) => {\n    return fetch(url + \"&api_key=keysF0s3bC0g7ODOW\", \n        {\n            method: 'DELETE'\n        })\n\t\t\t.then(res => res.json())\n\t\t\t.then(res => {\n                const data = {data: res.records}\n                //console.log('deleted records: ', data)\n                return data;\n\t\t\t})\n            .catch(error => console.log(error))\n}\n\nconst getFilterFormula = (filter) => {\n    var filterByFormula = \"\";\n    var counter = 1;\n    var view = ''\n    // if view in object, get it off\n    if ('view' in filter) {\n        view = `&view=${filter['view']}`\n        delete filter.view;\n    }\n    const size = filter && Object.keys(filter).length;\n    if (size > 1) {\n        filterByFormula += size > 1 ? 'AND(' : '';\n        Object.keys(filter).forEach(key => {\n            filterByFormula += `{${key}}='${filter[key]}'`\n            if (size > 1) {\n                filterByFormula += (counter === size) ? ')' : ', ';\n            }\n            counter ++;\n        });\n    }\n    if (size === 1) {\n        filterByFormula += `{${Object.keys(filter)[0]}}='${filter[Object.keys(filter)[0]]}'`\n    }\n    return(filterByFormula + view)\n}\n\nexport default (\n    apiUrl: string\n    ): customDataProvider => ({\n\n    getList: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const filter = params.filter;\n        console.log('get liste', perPage)\n        // filter\n        \n        let filterByFormula = getFilterFormula(filter)\n\n        // sort\n        const sort = `sort%5B0%5D%5Bfield%5D=${field}&sort%5B0%5D%5Bdirection%5D=${order.toLowerCase()}`;\n\n\n        if (perPage > 100) {\n            const url = `${apiUrl}/${resource}?pageSize=${100}&${sort}&filterByFormula=${filterByFormula}`;\n            return (fetchDataListPages(url, perPage))\n        } else {\n            const url = `${apiUrl}/${resource}?pageSize=${perPage}&${sort}&filterByFormula=${filterByFormula}`;\n            return (fetchDataList(url, page))\n        }        \n\n    },\n\n\n    getOne: (resource, params) => {\n        //console.log('get one', params, resource)\n        const url = `${apiUrl}/${resource}/${params.id}`;\n        return fetchDataOne(url)\n    },\n\n    getMany: (resource, params) => {\n        //console.log('in get many ', params)\n        const ids = params.ids;\n        let size = ids.length;\n        var filterByFormula = \"\";\n        var counter = 1;\n        if (size > 1) {\n            filterByFormula += size > 1 ? 'OR(' : '';\n            ids.forEach(id => {\n                filterByFormula += `{id} = '${id}'`\n                if (size > 1) {\n                    filterByFormula += (counter === size) ? ')' : ', ';\n                }\n                counter ++;\n            });\n        }\n        if (size === 1) {\n            filterByFormula += `{id} ='${ids[Object.keys(ids)[0]]}'`\n        }\n    const url = `${apiUrl}/${resource}?filterByFormula=${filterByFormula}`;\n    return (fetchDataList(url, size < 100 ? size : 100));\n    },\n\n    getManyReference: (resource, params) => {\n        const target = params.target;\n        const id = params.id;\n        const filter = params.filter;\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n\n        let list_filter = { [target]: id, ...filter }\n        //console.log(target, list_filter)\n\n        // filter\n        let filterByFormula = getFilterFormula(list_filter)\n\n        // sort\n        const sort = `sort%5B0%5D%5Bfield%5D=${field}&sort%5B0%5D%5Bdirection%5D=${order.toLowerCase()}`;\n\n        const url = `${apiUrl}/${resource}?pageSize=${perPage}&${sort}&filterByFormula=${filterByFormula}`;\n        return fetchDataList(url, page)\n    },\n\n\n    create: (resource, params) => {\n        const data = params.data;\n\n        let url = `${apiUrl}/${resource}`\n        let new_data = { records: [ { fields: data } ]}\n\n        return createData(url, new_data);\n    },\n\n    updateMany: (resource, params) => {\n        const ids = params.ids;\n        const data = params.data;\n\n        let url = `${apiUrl}/${resource}`;\n        let records = [];\n        ids.forEach( id => {\n            records.push({ id: id, fields: data })\n        })\n        let new_data = { records: records }\n\n        return (updateDataMany(url, new_data))\n    \n    },\n\n    update: (resource, params) => {\n        //console.log('update resource data', resource, params)\n        const id = params.id;\n        const data = params.data;\n\n        let url = `${apiUrl}/${resource}`;\n        let new_data = { records: [{ id: id, fields: data }] }\n        //console.log('update', new_data)\n\n\n        return (updateData(url, new_data))\n    },\n\n    deleteMany: (resource, params) => {\n        const ids = params.ids;\n\n        let url = `${apiUrl}/${resource}?records[]=${ids[0]}`;\n\n        for (var i=1; i < ids.length; i++) {\n            url += '&records[]=' + ids[i];\n        }\n\n        return (deleteDataMany(url))\n    \n    },\n\n    delete: (resource, params) => {\n        const id = params.id;\n\n        let url = `${apiUrl}/${resource}?records[]=${id}`;\n\n\n        return (deleteData(url))\n    }\n});"]},"metadata":{},"sourceType":"module"}